<?xml version="1.0"?><object xmlns="http://fxtran.net/#syntax" source-form="FREE" source-width="132" openmp="0" openacc="0"><file name="cfo_sut_example.f90">
<module-stmt>MODULE <module-N><N n="CFO_EXAMPLE"><n>cfo_example</n></N></module-N></module-stmt>  
  <implicit-none-stmt>IMPLICIT NONE</implicit-none-stmt>

  <private-stmt>PRIVATE</private-stmt>
  <private-stmt>PRIVATE :: <EN-LT><EN><N n="GET_SUM"><n>get_sum</n></N></EN></EN-LT></private-stmt>
  <public-stmt>PUBLIC :: <EN-LT><EN><N n="FT_ME"><n>fT_ME</n></N></EN></EN-LT></public-stmt>
  <public-stmt>PUBLIC :: <EN-LT><EN><N n="FOO"><n>foo</n></N></EN></EN-LT></public-stmt>

  <T-decl-stmt><_T-spec_><derived-T-spec>TYPE(<T-N><N n="OCF"><n>ocf</n></N></T-N>)</derived-T-spec></_T-spec_>, <attribute><attribute-N>DIMENSION</attribute-N><array-spec>(<shape-spec-LT><shape-spec>:</shape-spec></shape-spec-LT>)</array-spec></attribute>, <attribute><attribute-N>ALLOCATABLE</attribute-N></attribute>, <attribute><attribute-N>PUBLIC</attribute-N></attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="ZOO"><n>zoo</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>

  <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>INTEGER</T-N></intrinsic-T-spec></_T-spec_>, <attribute><attribute-N>PARAMETER</attribute-N></attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="DP"><n>dp</n></N></EN-N>=<init-E><named-E><N n="KIND"><n>KIND</n></N><R-LT><parens-R>(<element-LT><element><literal-E><l>0D0</l></literal-E></element></element-LT>)</parens-R></R-LT></named-E></init-E></EN-decl></EN-decl-LT></T-decl-stmt>

  

  
  <T-stmt>type, <attribute><attribute-N>abstract</attribute-N></attribute> :: <T-N><N n="SHAPE_M"><n>shape_m</n></N></T-N></T-stmt>
 
    
    <component-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>real</T-N></intrinsic-T-spec></_T-spec_> :: <EN-decl-LT><EN-decl><EN-N><N n="X"><n>x</n></N></EN-N></EN-decl>, <EN-decl><EN-N><N n="Y"><n>y</n></N></EN-N></EN-decl></EN-decl-LT></component-decl-stmt>
 
  <contains-stmt>contains</contains-stmt>

    
    
    <component-decl-stmt><_T-spec_><procedure-T-spec>procedure(<procedure-N><N n="SHAPE_AREA"><n>shape_area</n></N></procedure-N>)</procedure-T-spec></_T-spec_>, <attribute><attribute-N>deferred</attribute-N></attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="GET_AREA"><n>get_area</n></N></EN-N></EN-decl></EN-decl-LT></component-decl-stmt>
  <end-T-stmt>end type <T-N><N n="SHAPE_M"><n>shape_m</n></N></T-N></end-T-stmt>
 
  
  
  <interface-stmt>interface</interface-stmt>
    <function-stmt>function <function-N><N n="SHAPE_AREA"><n>shape_area</n></N></function-N>(<dummy-arg-LT><arg-N><N n="THIS"><n>this</n></N></arg-N></dummy-arg-LT>) <result-spec>result(<N n="AREA"><n>area</n></N>)</result-spec></function-stmt>
      <import-stmt>import :: <import-N-LT><N n="SHAPE_M"><n>shape_m</n></N></import-N-LT></import-stmt>
      <T-decl-stmt><_T-spec_><derived-T-spec>class(<T-N><N n="SHAPE_M"><n>shape_m</n></N></T-N>)</derived-T-spec></_T-spec_> :: <EN-decl-LT><EN-decl><EN-N><N n="THIS"><n>this</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
      <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>real</T-N></intrinsic-T-spec></_T-spec_> :: <EN-decl-LT><EN-decl><EN-N><N n="AREA"><n>area</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
    <end-function-stmt>end function <function-N><N n="SHAPE_AREA"><n>shape_area</n></N></function-N></end-function-stmt>
  <end-interface-stmt>end interface</end-interface-stmt>

<contains-stmt>CONTAINS</contains-stmt>

  
  <function-stmt>FUNCTION <function-N><N n="FT_ME"><n>fT_ME</n></N></function-N> (<dummy-arg-LT><arg-N><N n="TEMPERATURE"><n>temperature</n></N></arg-N></dummy-arg-LT>) <result-spec>RESULT (<N n="FT"><n>fT</n></N>)</result-spec></function-stmt>
    <implicit-none-stmt>IMPLICIT NONE</implicit-none-stmt>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>REAL</T-N><K-selector>(<K-spec><named-E><N n="DP"><n>dp</n></N></named-E></K-spec>)</K-selector></intrinsic-T-spec></_T-spec_>, <attribute><attribute-N>INTENT</attribute-N>(<intent-spec>IN</intent-spec>)</attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="TEMPERATURE"><n>temperature</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>REAL</T-N><K-selector>(<K-spec><named-E><N n="DP"><n>dp</n></N></named-E></K-spec>)</K-selector></intrinsic-T-spec></_T-spec_> :: <EN-decl-LT><EN-decl><EN-N><N n="FT"><n>fT</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
    <a-stmt><E-1><named-E><N n="FT"><n>fT</n></N></named-E></E-1> <a>=</a> <E-2><op-E><parens-E>(<op-E><literal-E><l>1D0</l></literal-E> <op n="+"><o>+</o></op> <op-E><parens-E>(<op-E><named-E><N n="TEMPERATURE"><n>temperature</n></N></named-E> <op n="-"><o>-</o></op> <literal-E><l>15D0</l></literal-E></op-E>)</parens-E><op n="*"><o>*</o></op><literal-E><l>9.5D0</l></literal-E></op-E></op-E>)</parens-E><op n="/"><o>/</o></op><literal-E><l>260D0</l></literal-E></op-E></E-2></a-stmt>
  <end-function-stmt>END FUNCTION <function-N><N n="FT_ME"><n>fT_ME</n></N></function-N></end-function-stmt>
  
  
  <function-stmt><intrinsic-T-spec><T-N>integer</T-N></intrinsic-T-spec> function <function-N><N n="GET_SUM"><n>get_sum</n></N></function-N>(<dummy-arg-LT><arg-N><N n="N1"><n>n1</n></N></arg-N>, <arg-N><N n="N2"><n>n2</n></N></arg-N></dummy-arg-LT>)</function-stmt>
    <implicit-none-stmt>implicit none</implicit-none-stmt>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>integer</T-N></intrinsic-T-spec></_T-spec_> :: <EN-decl-LT><EN-decl><EN-N><N n="N1"><n>n1</n></N></EN-N></EN-decl>, <EN-decl><EN-N><N n="N2"><n>n2</n></N></EN-N></EN-decl>, <EN-decl><EN-N><N n="SUM"><n>sum</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>

    
    <a-stmt><E-1><named-E><N n="SUM"><n>sum</n></N></named-E></E-1> <a>=</a> <E-2><op-E><named-E><N n="N1"><n>n1</n></N></named-E> <op n="+"><o>+</o></op> <named-E><N n="N2"><n>n2</n></N></named-E></op-E></E-2></a-stmt>
  <end-function-stmt>end function <function-N><N n="GET_SUM"><n>get_sum</n></N></function-N></end-function-stmt>

  
  <function-stmt>function <function-N><N n="GET_SUM2"><n>get_sum2</n></N></function-N>(<dummy-arg-LT><arg-N><N n="N1"><n>n1</n></N></arg-N>, <arg-N><N n="N2"><n>n2</n></N></arg-N></dummy-arg-LT>) <result-spec>result(<N n="SUM"><n>sum</n></N>)</result-spec></function-stmt>
    <implicit-none-stmt>implicit none</implicit-none-stmt>

    
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>integer</T-N></intrinsic-T-spec></_T-spec_>, <attribute><attribute-N>intent</attribute-N>(<intent-spec>in</intent-spec>)</attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="N1"><n>n1</n></N></EN-N></EN-decl>, <EN-decl><EN-N><N n="N2"><n>n2</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>integer</T-N></intrinsic-T-spec></_T-spec_> :: <EN-decl-LT><EN-decl><EN-N><N n="SUM"><n>sum</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
    <a-stmt><E-1><named-E><N n="SUM"><n>sum</n></N></named-E></E-1> <a>=</a> <E-2><op-E><named-E><N n="N1"><n>n1</n></N></named-E> <op n="+"><o>+</o></op> <named-E><N n="N2"><n>n2</n></N></named-E></op-E></E-2></a-stmt>
  <end-function-stmt>end function <function-N><N n="GET_SUM2"><n>get_sum2</n></N></function-N></end-function-stmt>

  
  
  <function-stmt><prefix>pure</prefix> function <function-N><N n="GET_SUM3"><n>get_sum3</n></N></function-N>(<dummy-arg-LT><arg-N><N n="N1"><n>n1</n></N></arg-N>, <arg-N><N n="N2"><n>n2</n></N></arg-N></dummy-arg-LT>) <result-spec>result(<N n="SUM"><n>sum</n></N>)</result-spec></function-stmt>
    <implicit-none-stmt>implicit none</implicit-none-stmt>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>integer</T-N></intrinsic-T-spec></_T-spec_>, <attribute><attribute-N>intent</attribute-N>(<intent-spec>in</intent-spec>)</attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="N1"><n>n1</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>

    
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>integer</T-N></intrinsic-T-spec></_T-spec_>, <attribute><attribute-N>intent</attribute-N>(<intent-spec>in</intent-spec>)</attribute>, <attribute><attribute-N>optional</attribute-N></attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="N2"><n>n2</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>integer</T-N></intrinsic-T-spec></_T-spec_> :: <EN-decl-LT><EN-decl><EN-N><N n="SUM"><n>sum</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>

    <if-then-stmt>if(<condition-E><named-E><N n="PRESENT"><n>present</n></N><R-LT><parens-R>(<element-LT><element><named-E><N n="N2"><n>n2</n></N></named-E></element></element-LT>)</parens-R></R-LT></named-E></condition-E>) then</if-then-stmt>
      <a-stmt><E-1><named-E><N n="SUM"><n>sum</n></N></named-E></E-1> <a>=</a> <E-2><op-E><named-E><N n="N1"><n>n1</n></N></named-E> <op n="+"><o>+</o></op> <named-E><N n="N2"><n>n2</n></N></named-E></op-E></E-2></a-stmt>
    <else-stmt>else</else-stmt>
      <a-stmt><E-1><named-E><N n="SUM"><n>sum</n></N></named-E></E-1> <a>=</a> <E-2><op-E><named-E><N n="N1"><n>n1</n></N></named-E> <op n="+"><o>+</o></op> <literal-E><l>1</l></literal-E></op-E></E-2></a-stmt>
    <end-if-stmt>end if</end-if-stmt>
  <end-function-stmt>end function <function-N><N n="GET_SUM3"><n>get_sum3</n></N></function-N></end-function-stmt>
  
  
  <function-stmt>FUNCTION <function-N><N n="FOO"><n>foo</n></N></function-N> (<dummy-arg-LT><arg-N><N n="ARG0"><n>arg0</n></N></arg-N></dummy-arg-LT>) <result-spec>RESULT (<N n="OUT"><n>out</n></N>)</result-spec></function-stmt>
    <implicit-none-stmt>IMPLICIT NONE</implicit-none-stmt>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>real</T-N></intrinsic-T-spec></_T-spec_>, <attribute><attribute-N>INTENT</attribute-N>(<intent-spec>IN</intent-spec>)</attribute>  :: <EN-decl-LT><EN-decl><EN-N><N n="ARG0"><n>arg0</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
    



    <a-stmt><E-1><named-E><N n="OUT"><n>out</n></N></named-E></E-1> <a>=</a><E-2></E-2></a-stmt> 
  <end-function-stmt>END FUNCTION <function-N><N n="FOO"><n>foo</n></N></function-N></end-function-stmt>

<end-module-stmt>END MODULE <module-N><N n="CFO_EXAMPLE"><n>cfo_example</n></N></module-N></end-module-stmt>
</file></object>
